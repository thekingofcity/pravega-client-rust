var searchIndex = JSON.parse('{\
"pravega_client":{"doc":"A Rust client for Pravega.","t":"AAAAAADDLLLLLLLLLLLLLLLLLLLAMLLLLLLLLADLLLLLLMDLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNENNLLLLLLLLLLLLLLLLLLLLLLMMMDDDDDLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMAAAALLLLLLLLLLLLLLLLLLLLADDEDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLMMLMMLMLLLMLMLLLLLLLLLLLLLLMLLLLMNDDDEDENNNLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDNDENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMMMMNDEDENNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMDLLLIDDRILLLLLLLLLLLLKLLLLLLALLLLLLKLLADNDEDNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLMMMDEDNDNDNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMDDLLLLLLLLLLLLLLLLLLAALLLLLLLLDDDNNNNDERDDIIILLLLLLLLLLLLLLLLLKLLLLLMLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLFLKLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMMMMMNNNNDNEGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMM","n":["byte","client_factory","error","event","index","sync","ByteReader","ByteWriter","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","drop","from","from","init","init","into","into","into_request","into_request","reader","segment","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","writer","ByteReader","available","current_head","current_offset","current_tail","read","seek","segment","ByteWriter","current_offset","flush","reset","seal","seek_to_tail","truncate_data_before","write","ClientFactory","ClientFactoryAsync","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","config","config","controller_client","controller_client","create_byte_reader","create_byte_reader","create_byte_writer","create_byte_writer","create_event_writer","create_event_writer","create_index_reader","create_index_reader","create_index_writer","create_index_writer","create_reader_group","create_reader_group","create_reader_group_with_config","create_reader_group_with_config","create_stream_meta_client","create_synchronizer","create_synchronizer","create_table","create_table","create_transactional_event_writer","create_transactional_event_writer","delete_reader_group","delete_reader_group","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","into_request","into_request","new","new","new_with_runtime","runtime","runtime_handle","runtime_handle","to_async","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ConditionalCheckFailure","Error","InternalFailure","InvalidInput","as_error_source","backtrace","borrow","borrow_mut","cause","deref","deref_mut","description","drop","fmt","fmt","from","init","into","into_request","provide","source","to_string","try_from","try_into","type_id","vzip","msg","msg","msg","EventReader","EventWriter","ReaderGroup","Transaction","TransactionalEventWriter","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","config","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","id","init","init","init","init","init","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","name","reader","reader_group","reader_group_state","transactional_writer","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","writer","Event","EventReader","EventReaderError","SegmentSlice","SliceMetadata","StateError","acquire_segment","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","end_offset","fmt","fmt","fmt","fmt","fmt","from","from","from","from","has_events","id","init","init","init","init","into","into","into","into","into_iter","into_request","into_request","into_request","into_request","is_empty","last_event_offset","meta","next","offset_in_segment","partial_data_present","provide","read_offset","reader_offline","release_segment","release_segment_at","scoped_segment","source","start_offset","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","source","Cbor","ReaderGroup","ReaderGroupConfig","ReaderGroupConfigBuilder","SerdeError","StreamCutV1","StreamCutVersioned","Tail","Unbounded","V1","add_stream","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","clone","clone","clone","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","config","create_reader","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bytes","get_managed_streams","get_start_stream_cuts","get_streams","init","init","init","init","init","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","list_readers","name","new","provide","read_from_head_of_stream","read_from_stream","read_from_tail_of_stream","reader_offline","serialize","serialize","serialize","serialize_value","serialize_value","serialize_value","set_group_refresh_time","source","to_bytes","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","msg","source","Offset","ReaderAlreadyOfflineError","ReaderGroupState","ReaderGroupStateError","SyncError","add_reader","as_error_source","assign_segment_to_reader","backtrace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","check_online","clone","clone_box","clone_into","compute_segments_to_acquire_or_release","deref","deref","deref","deref_mut","deref_mut","deref_mut","description","deserialize","drop","drop","drop","eq","equivalent","fmt","fmt","fmt","from","from","from","get_hash","get_hash","get_online_readers","get_segments","get_segments_for_reader","hash","init","init","init","into","into","into","into_request","into_request","into_request","is_precondition","new","provide","read","release_segment","segment_completed","serialize","serialize_value","source","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","error_msg","error_msg","source","source","PingerError","Transaction","TransactionError","TransactionalEventWriter","TransactionalEventWriterError","TxnAbortError","TxnClosed","TxnCommitError","TxnControllerError","TxnSegmentWriterError","TxnStreamControllerError","TxnStreamWriterError","abort","as_error_source","as_error_source","backtrace","backtrace","begin","borrow","borrow","borrow_mut","borrow_mut","cause","cause","check_status","commit","deref","deref","deref_mut","deref_mut","description","description","drop","drop","fmt","fmt","fmt","fmt","from","from","get_txn","init","init","into","into","into_request","into_request","provide","provide","source","source","stream","to_string","to_string","try_from","try_from","try_into","try_into","txn_id","type_id","type_id","vzip","vzip","write_event","error_msg","id","id","id","source","source","status","status","msg","source","EventWriter","flush","write_event","write_event_by_routing_key","Fields","IndexReader","IndexWriter","RECORD_SIZE","Value","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","get_field_values","init","init","into","into","into_request","into_request","reader","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","writer","FieldNotFound","FieldNotFound","IndexReader","IndexReaderError","Internal","Internal","InvalidOffset","InvalidOffset","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","cause","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","fail","fail","fail","first_record_data","fmt","fmt","fmt","fmt","fmt","from","from","from","from","head_offset","init","init","init","init","into","into","into","into","into_error","into_error","into_error","into_request","into_request","into_request","into_request","last_record_data","msg","msg","msg","provide","read","search_offset","source","tail_offset","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","msg","msg","msg","IndexWriter","IndexWriterError","Internal","Internal","InvalidCondition","InvalidCondition","InvalidData","InvalidData","InvalidFields","InvalidFields","append","append_conditionally","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","fail","fail","fail","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","into_error","into_error","into_error","into_error","into_request","into_request","into_request","into_request","into_request","msg","msg","msg","provide","source","to_owned","to_owned","to_owned","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","backtrace","msg","msg","msg","source","Synchronizer","Table","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","into_request","into_request","synchronizer","table","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Insert","Key","Remove","SyncPreconditionError","SyncTableError","SyncTombstoneError","SyncUpdateError","Synchronizer","SynchronizerError","TOMBSTONE","Update","Value","ValueClone","ValueData","ValueSerialize","as_error_source","backtrace","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone_box","clone_box","clone_into","clone_into","contains_key","contains_outer_key","data","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","deserialize_from","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fetch_updates","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","get_hash","get_hash","get_inner_map","get_inner_map","get_key_version","get_name","get_outer_map","hash","init","init","init","init","init","init","insert","insert","insert_tombstone","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","is_empty","key","key_version","new","new","new","provide","remove","retain","serialize","serialize","serialize_value","serialize_value","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","error_msg","error_msg","error_msg","operation","source","ConnectionError","IncorrectKeyVersion","KeyDoesNotExist","OperationError","Table","TableDoesNotExist","TableError","Version","as_error_source","backtrace","borrow","borrow_mut","cause","deref","deref_mut","description","drop","fmt","fmt","from","get","get_all","init","insert","insert_all","insert_conditionally","insert_conditionally_all","into","into_request","provide","read_entries_stream","read_entries_stream_from_position","read_keys_stream","remove","remove_all","remove_conditionally","remove_conditionally_all","source","to_string","try_from","try_into","type_id","vzip","can_retry","error_msg","error_msg","error_msg","name","operation","operation","operation","operation","operation","source"],"q":["pravega_client","","","","","","pravega_client::byte","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::byte::reader","","","","","","","","pravega_client::byte::writer","","","","","","","","pravega_client::client_factory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::error","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::error::Error","","","pravega_client::event","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::event::reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::event::reader::EventReaderError","pravega_client::event::reader_group","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::event::reader_group::SerdeError","","pravega_client::event::reader_group_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::event::reader_group_state::ReaderGroupStateError","","","","pravega_client::event::transactional_writer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::event::transactional_writer::TransactionError","","","","","","","","pravega_client::event::transactional_writer::TransactionalEventWriterError","","pravega_client::event::writer","","","","pravega_client::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::index::reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::index::reader::IndexReaderError","","","pravega_client::index::writer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::index::writer::IndexWriterError","","","","","pravega_client::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::sync::synchronizer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::sync::synchronizer::SynchronizerError","","","","","pravega_client::sync::table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pravega_client::sync::table::TableError","","","","","","","","","",""],"d":["The Byte API for writing and reading data to a segment in …","Factory to create components in Pravega Rust client.","","The Event API for writing and reading data.","The Index API provides a way to build a monotonic index …","Pravega synchronization primitives.","A ByteReader enables reading raw bytes from a segment.","Allow for writing raw bytes directly to a segment.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","A ByteReader enables reading raw bytes from a segment.","Return the bytes that are available to read instantly …","Return the head of current readable data in the segment …","Return the current read offset.","Return the tail offset of the segment asynchronously.","Read data asynchronously.","The seek method for ByteReader allows seeking to a byte …","","Allow for writing raw bytes directly to a segment.","Track the current write position for this writer.","Flush data.","Reset the internal Reactor, making it ready for new …","Seal the segment and no further writes are allowed.","Seek to the tail of the segment.","Truncate data before a given offset for the segment. No …","Writes the given data to the server asynchronously. It …","Applications should use ClientFactory to create resources …","","","","","","","","","","","","","","","","","","","","","","","Create a ReaderGroup with the specified name to read from …","Create a Reader Group based on the ReaderGroupConfig.","Create a ReaderGroup with the streams configured in the …","","","","","","","","Delete a ReaderGroup.","Delete a ReaderGroup given for a given scope.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Read events from Stream.","Write events exactly once to a given stream.","A collection of readers that collectively read all the …","Pravega Transaction support.","Write events to a stream transactionally.","","","","","","","","","","","","","","","","","","","","","","","Destructor for reader invoked. This will automatically …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This represents an event that was read from a Pravega …","Read events from Stream.","","This represents a segment slice which can be used to read …","","","This function returns a SegmentSlice from the data …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Method to verify if the Segment has pending events that …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Mark the reader as offline after calling the …","Release a partially read segment slice back to event …","Release a segment back to the reader and also indicate the …","","","","","","","","","","","","","","","","","","","","","","","","","A collection of readers that collectively read all the …","Specifies the ReaderGroupConfig. …","Builder used to build the ReaderGroup Config. The reader …","","A set of segment/offset pairs for a single stream that …","StreamCutVersioned enum contains all versions of StreamCut …","","","","Add a Pravega Stream to the reader group which will be …","","","","","","","","","","","","","Build a ReaderGroupConfig object. This method panics for …","","","","","","","","","","","","Create a new EventReader under the ReaderGroup. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Method to de-serialize the ReaderGroupConfig object from …","Return the managed Streams by the ReaderGroup.","Method to obtain the streams and start Streamcut in a …","Method to obtain the streams in a ReaderGroupConfig.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns the readers which are currently online.","","Create a new ReaderGroupConfig by specifying the group …","","Add a Pravega Stream to the reader group which will be …","Add a Pravega Stream to the reader group which will be …","Add a Pravega Stream to the reader group which will be …","Removes a reader from the reader group. (Because it is …","","","","","","","Set reader group refresh time.","","Method to serialize the ReaderGroupConfig into bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ReaderGroupState encapsulates all readers states.","","","Adds a reader to the reader group state.","","Assign an unassigned segment to a given reader","","","","","","","","","","","","","Compute the number of segments to acquire.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the active readers in a vector.","Return the list of all segments.","Return the list of segments assigned to the requested …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Constructs a new <code>Offset</code>.","","The client has read to this offset and handle the result …","Release a currently assigned segment from the given reader.","Remove the completed segments and add its successors for …","","","","","","","","","","","","","","","","","","","","","","","Pravega Transaction support.","","Write events to a stream transactionally.","","","","","","","","","abort will send abort request to Pravega controller.","","","","","This method opens a transaction by sending a request to …","","","","","","","check the current Transaction status by sending request to …","commit accepts a timestamp and will send a commit request …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This method returns the Transaction based on the given …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","get the stream that this transaction is based on.","","","","","","","get the transaction id.","","","","","write_event accepts a vec of bytes as the input event and …","","","","","","","","","","","Write events exactly once to a given stream.","Flush data.","Write an event without routing key.","Writes an event with a routing key.","","Index Reader reads the Index Record from Stream.","Index Writer writes a fixed size Record to the stream.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","SNAFU context selector for the …","","Index Reader reads the Index Record from Stream.","","SNAFU context selector for the <code>IndexReaderError::Internal</code> …","","SNAFU context selector for the …","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Data in the first readable record.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the readable head offset.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Data in the last record.","","","","","Reads records starting from the given offset.","Given an Field (name, v), find the offset of the first …","","Get the tail offset.","","","","","","","","","","","","","","","","","","","","","","","","Index Writer writes a fixed size Record to the stream.","","SNAFU context selector for the <code>IndexWriterError::Internal</code> …","","SNAFU context selector for the …","","SNAFU context selector for the …","","SNAFU context selector for the …","","Append data with a given Fields.","Append data with a given Fields and conditioned on a …","","","","","","","","","","","","","Consume the selector and return the associated error","Consume the selector and return the associated error","Consume the selector and return the associated error","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Consume the selector and return a <code>Result</code> with the …","Flush data.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Truncate data to a given offset.","","","","","","","","","","","","","","","","","","","","","","","","","","Provide a map that is synchronized across different …","Table is the client implementation of Table Segment in …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Insert struct is used internally to update the server side …","The Key struct in the in memory map. It contains two …","The remove struct is used internally to remove a value …","","","","","Provide a map that is synchronized across different …","","","The Update contains a nested map and a version map, which …","The Value struct in the in memory map. It contains two …","Clone trait helper.","The trait bound for the ValueData","Serialize trait helper, we need to serialize the ValueData …","","","","","","","","","","","","","","","","","","","","","","Check if an inner key exists. The tombstoned value will …","Check if an outer_key exists. The tombstoned value will …","","","","","","","","","","","","","","","","Deserialize the Value into the type T by using cbor …","","","","","","","","","","","Fetch the latest map from remote server and apply it to …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the Value associated with the map. The data in Value …","get method will take an outer_key and an inner_key and …","","","Get the inner map currently held in memory. The return …","get_inner_map method will take an outer_key return the …","Get the Key version of the given key,","Get the name of the Synchronizer.","Get the outer map currently held in memory. The return …","","","","","","","","Insert/Update a list of keys and applies it atomically to …","insert method needs an outer_key and an inner_key to find …","insert_tombstone method replaces the original value with a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Remove a list of keys and apply it atomically to local map.","retain a specific map to make sure it’s not altered by …","Serialize the  into the Vec by using cbor serializer. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Table is the client implementation of Table Segment in …","","","","","","","","","","","","","","","Returns the argument unchanged.","Return the latest value corresponding to the key.","Return the latest values for a given list of keys. If the …","","Unconditionally insert a new or update an existing entry …","Unconditionally insert a new or updates an existing entry …","Conditionally insert a key-value pair into the table map. …","Conditionally insert key-value pairs into the table. The …","Calls <code>U::from(self)</code>.","","","Read entries as an Async Stream. This method deserialized …","Read entries as an Async Stream from a given position. …","Read keys as an Async Stream. This method deserializes the …","Unconditionally remove a key from the Table. If the key …","Unconditionally remove the provided keys from the table.","Conditionally remove a key from the Table if it matches …","Conditionally remove keys after checking the key version. …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,2,6,2,6,2,6,2,6,2,2,6,2,6,2,6,2,6,2,6,0,6,2,6,2,6,2,6,2,6,0,0,6,6,6,6,6,6,6,0,2,2,2,2,2,2,2,0,0,14,13,14,13,13,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,13,14,13,14,13,14,13,14,13,14,13,14,14,14,13,14,13,14,13,14,13,14,13,14,13,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,96,97,98,0,0,0,0,0,43,26,32,44,18,43,26,32,44,18,26,43,26,32,44,18,43,26,32,44,18,43,43,26,32,44,44,18,18,43,26,32,44,18,43,43,26,32,44,18,43,26,32,44,18,43,26,32,44,18,26,0,0,0,0,43,26,32,44,18,43,26,32,44,18,43,26,32,44,18,43,26,32,44,18,0,0,0,0,0,0,46,43,46,46,46,48,45,47,46,48,45,47,46,47,47,45,47,46,48,45,47,46,48,45,47,46,46,48,45,45,47,47,46,46,48,45,47,46,48,45,47,47,43,46,48,45,47,46,48,45,47,45,46,48,45,47,45,47,45,45,48,47,46,47,43,43,43,47,46,47,47,46,46,48,45,47,46,48,45,47,46,48,45,47,48,46,48,45,47,99,51,0,0,0,0,0,0,52,52,52,50,51,51,50,27,52,53,51,50,27,52,53,51,50,51,27,52,53,27,52,53,27,52,53,26,26,50,50,27,52,53,51,50,27,52,53,51,51,27,52,53,50,27,52,53,51,27,52,53,27,52,53,51,51,50,27,52,53,51,27,26,27,27,50,27,52,53,51,50,27,52,53,51,50,27,52,53,51,26,26,27,51,50,50,50,26,27,52,53,27,52,53,50,51,27,27,52,53,51,50,27,52,53,51,50,27,52,53,51,50,27,52,53,51,50,27,52,53,51,100,100,0,60,0,0,60,64,60,64,60,64,60,66,64,60,66,60,64,66,66,66,64,64,60,66,64,60,66,60,66,64,60,66,66,66,60,60,66,64,60,66,66,66,64,64,64,66,64,60,66,64,60,66,64,60,66,60,66,60,66,64,64,66,66,60,66,60,64,60,66,64,60,66,64,60,66,64,60,66,101,102,101,102,72,0,0,0,0,71,71,71,71,71,72,71,44,72,71,72,71,32,72,71,72,71,72,71,44,44,72,71,72,71,72,71,72,71,72,72,71,71,72,71,32,72,71,72,71,72,71,72,71,72,71,44,72,71,72,71,72,71,44,72,71,72,71,44,103,104,105,106,107,108,105,106,109,110,0,18,18,18,0,0,0,0,0,24,19,24,19,24,19,24,19,24,19,24,19,20,24,19,24,19,24,19,0,24,19,24,19,24,19,111,24,19,0,0,77,0,0,0,77,0,77,77,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,78,79,80,78,79,80,77,78,79,80,77,77,78,79,80,77,78,79,80,19,78,79,80,77,77,78,79,80,77,19,78,79,80,77,78,79,80,77,78,79,80,78,79,80,77,19,78,79,80,77,19,19,77,19,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,112,113,114,0,0,0,83,0,83,0,83,0,83,24,24,83,83,87,84,85,86,83,87,84,85,86,83,84,85,86,83,87,84,85,86,87,84,85,86,87,84,85,86,83,87,84,85,86,83,83,87,84,85,86,83,84,85,86,24,87,84,85,86,83,83,87,84,85,86,83,87,84,85,86,83,87,84,85,86,83,87,84,85,86,87,84,85,86,83,84,85,86,83,83,87,84,85,86,83,24,87,84,85,86,83,87,84,85,86,83,87,84,85,86,83,87,84,85,86,83,115,116,117,118,115,0,0,29,30,29,30,29,30,29,30,29,30,29,30,29,30,29,30,29,30,0,0,29,30,29,30,29,30,29,30,0,0,0,69,69,69,69,0,0,0,0,0,0,0,0,69,69,90,94,95,69,88,89,90,94,95,69,88,89,69,88,89,119,89,88,89,90,90,89,90,94,95,69,88,89,90,94,95,69,88,89,69,89,0,90,94,95,69,88,89,88,89,88,89,29,69,69,88,89,90,94,95,69,88,89,29,90,88,88,29,90,29,29,29,88,90,94,95,69,88,89,29,90,90,90,94,95,69,88,89,90,94,95,69,88,89,90,88,88,90,94,95,69,29,90,0,89,120,89,69,88,89,69,90,94,95,69,88,89,90,94,95,69,88,89,90,94,95,69,88,89,89,90,94,95,69,88,89,121,122,123,124,124,33,33,33,33,0,33,0,0,33,33,33,33,33,33,33,33,33,33,33,33,30,30,33,30,30,30,30,33,33,33,30,30,30,30,30,30,30,33,33,33,33,33,33,125,126,127,128,129,125,126,129,127,128,125],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[2],[1],[[]],[[]],[[],1],[[],1],[[]],[[]],[[],3],[[],3],0,0,[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[]],[[]],0,0,[6,1],[6,[[8,[7]]]],[6,7],[6,[[8,[7]]]],[6,[[4,[1,9]]]],[[6,10],[[8,[7]]]],0,0,[2,7],[2,[[4,[11]]]],[2,[[4,[11]]]],[2,[[4,[11]]]],[2],[[2,12],[[4,[11]]]],[2,[[4,[1,11]]]],0,0,[[]],[[]],[[]],[[]],[13,13],[[]],[14,15],[13,15],[14,16],[13,16],[[14,17],6],[[13,17],6],[[14,17],2],[[13,17],2],[[14,17],18],[[13,17],18],[[14,17],19],[[13,17],19],[[14,17],[[24,[[0,[20,21,22,23]]]]]],[[13,17],[[24,[[0,[20,21,22,23]]]]]],[[14,25,17],26],[[13,25,17],26],[[14,25,27,28],26],[[13,28,25,27],26],0,[[14,28,25],29],[[13,28,25],29],[[14,28,25],30],[[13,28,25],30],[[14,17,31],32],[[13,17,31],32],[[14,28,25],[[4,[33]]]],[[13,28,25],[[4,[33]]]],[1],[1],[1],[1],[1],[1],[[13,34],35],[[]],[[]],[[],1],[[],1],[[]],[[]],[[],3],[[],3],[15,14],[[15,36],13],[[15,37],14],[14,37],[14,36],[13,36],[14,13],[[]],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[]],[[]],0,0,0,0,[[],38],[11,[[40,[39]]]],[[]],[[]],[11,[[40,[38]]]],[1],[1],[11,41],[1],[[11,34],35],[[11,34],35],[[]],[[],1],[[]],[[],3],[42],[11,[[40,[38]]]],[[],25],[[],4],[[],4],[[],5],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[43],[1],[1],[1],[44],[1],[18],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],0,0,0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[43,[[4,[[40,[45]],46]]]],[[],38],[46,[[40,[39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,[[40,[38]]]],[47,47],[[]],[[],45],[[],47],[1],[1],[1],[1],[1],[1],[1],[1],[46,41],[1],[1],[1],[45],[1],0,[[46,34],35],[[46,34],35],[[48,34],35],[[45,34],35],[[47,34],35],[[]],[[]],[[]],[[]],[47,49],0,[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[45,49],0,0,[45,40],0,0,[42],0,[43,[[4,[46]]]],[[43,45],[[4,[46]]]],[[43,45,12],[[4,[46]]]],0,[46,[[40,[38]]]],0,[[]],[[],25],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[],5],0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[50,17],50],[[],38],[51,[[40,[39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,27],[51,[[40,[38]]]],[27,27],[52,52],[53,53],[[],[[56,[54,55]]]],[[],[[56,[54,55]]]],[[],[[56,[54,55]]]],[[]],[[]],[[]],0,[[26,25],43],[[],50],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[51,41],[[],[[4,[27]]]],[[],[[4,[52]]]],[[],[[4,[53]]]],[1],[1],[1],[1],[1],[[27,27],49],[[52,52],49],[[53,53],49],[[27,34],35],[[52,34],35],[[53,34],35],[[51,34],35],[[51,34],35],[[]],[[]],[[]],[[]],[[]],[[],[[4,[27,51]]]],[26,[[57,[17]]]],[27,[[58,[17,52]]]],[27,[[57,[17]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[26,[[57,[59]]]],0,[7,27],[42],[[50,17],50],[[50,17,52],50],[[50,17],50],[[26,25,[40,[[58,[25,12]]]]],[[4,[60]]]],[27,4],[52,4],[53,4],[61,[[4,[62]]]],[61,[[4,[62]]]],[61,[[4,[62]]]],[[50,7],50],[51,[[40,[38]]]],[27,[[4,[[57,[63]],51]]]],[[]],[[]],[[]],[[],25],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[64,59],[[4,[60]]]],[[],38],[[64,59],[[4,[[40,[65]],60]]]],[60,[[40,[39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[60,[[40,[38]]]],[[64,59],49],[66,66],[[],[[56,[54,55]]]],[[]],[[64,59],[[4,[67,60]]]],[1],[1],[1],[1],[1],[1],[60,41],[[],[[4,[66]]]],[1],[1],[1],[[66,66],49],[[],49],[[60,34],35],[[60,34],35],[[66,34],35],[[]],[[]],[[]],[[],7],[[],7],[64,[[57,[59]]]],[64,[[68,[65]]]],[[64,59],[[4,[68,69]]]],[66],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[],3],[[],3],[[],3],[60,49],[12,66],[42],0,[[64,59,65,66],[[4,[60]]]],[[64,59,65,70],[[4,[60]]]],[66,4],[61,[[4,[62]]]],[60,[[40,[38]]]],[[]],[[],25],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[44,[[4,[71]]]],[[],38],[[],38],[72,[[40,[39]]]],[71,[[40,[39]]]],[32,[[4,[44,72]]]],[[]],[[]],[[]],[[]],[72,[[40,[38]]]],[71,[[40,[38]]]],[44,[[4,[73,71]]]],[[44,74],[[4,[71]]]],[1],[1],[1],[1],[72,41],[71,41],[1],[1],[[72,34],35],[[72,34],35],[[71,34],35],[[71,34],35],[[]],[[]],[[32,75],[[4,[44,72]]]],[[],1],[[],1],[[]],[[]],[[],3],[[],3],[42],[42],[72,[[40,[38]]]],[71,[[40,[38]]]],[44,17],[[],25],[[],25],[[],4],[[],4],[[],4],[[],4],[44,75],[[],5],[[],5],[[]],[[]],[[44,[40,[25]],[57,[63]]],[[4,[71]]]],0,0,0,0,0,0,0,0,0,0,0,[18,[[4,[11]]]],[[18,[57,[63]]],[[76,[[4,[11]]]]]],[[18,25,[57,[63]]],[[76,[[4,[11]]]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[]],[[]],[[],57],[[],1],[[],1],[[]],[[]],[[],3],[[],3],0,[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],7],[[]],[[]],0,0,0,0,0,0,0,0,0,[[],38],[77,[[40,[39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[78,77],[79,77],[80,77],[77,[[40,[38]]]],[[[78,[81]]],[[78,[81]]]],[[[79,[81]]],[[79,[81]]]],[[[80,[81]]],[[80,[81]]]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[1],[1],[77,41],[1],[1],[1],[1],[78,[[4,[77]]]],[79,[[4,[77]]]],[80,[[4,[77]]]],[19,[[4,[[57,[63]],77]]]],[[[78,[23]],34],35],[[[79,[23]],34],35],[[[80,[23]],34],35],[[77,34],35],[[77,34],35],[[]],[[]],[[]],[[]],[19,[[4,[7,77]]]],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[78,77],[79,77],[80,77],[[],3],[[],3],[[],3],[[],3],[19,[[4,[[57,[63]],77]]]],0,0,0,[42],[[19,7,7],[[4,[82,77]]]],[19,[[4,[7,77]]]],[77,[[40,[38]]]],[19,[[4,[7,77]]]],[[]],[[]],[[]],[[],25],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[24,[[0,[20,21,22,23]]]],[0,[20,21,22,23]],[57,[63]]],[[4,[83]]]],[[[24,[[0,[20,21,22,23]]]],[0,[20,21,22,23]],[0,[20,21,22,23]],[57,[63]]],[[4,[83]]]],[[],38],[83,[[40,[39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[84,83],[85,83],[86,83],[83,[[40,[38]]]],[87,87],[[[84,[81]]],[[84,[81]]]],[[[85,[81]]],[[85,[81]]]],[[[86,[81]]],[[86,[81]]]],[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[83,41],[1],[1],[1],[1],[1],[84,[[4,[83]]]],[85,[[4,[83]]]],[86,[[4,[83]]]],[[[24,[[0,[20,21,22,23]]]]],[[4,[83]]]],[[87,34],35],[[[84,[23]],34],35],[[[85,[23]],34],35],[[[86,[23]],34],35],[[83,34],35],[[83,34],35],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[87,83],[84,83],[85,83],[86,83],[[],3],[[],3],[[],3],[[],3],[[],3],0,0,0,[42],[83,[[40,[38]]]],[[]],[[]],[[]],[[]],[[],25],[[[24,[[0,[20,21,22,23]]]],7],[[4,[83]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[]],[[]],[[],1],[[],1],[[]],[[]],[[],3],[[],3],0,0,[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],38],[69,[[40,[39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69,[[40,[38]]]],[88,88],[89,89],[[],[[56,[54]]]],[[],[[56,[54,55]]]],[[]],[[]],[[90,41,41],49],[[90,41],49],0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[69,41],[[],[[4,[89]]]],[[],[[4,[62]]]],[1],[1],[1],[1],[1],[1],[[88,88],49],[[89,89],49],[[],49],[[],49],[29,[[4,[91,33]]]],[[69,34],35],[[69,34],35],[[88,34],35],[[89,34],35],[[]],[[]],[[]],[[]],[[]],[[]],[[29,41,41],[[40,[89]]]],[[90,41,41],[[40,[89]]]],[[],7],[[],7],[[29,41],[[58,[25,89]]]],[[90,41],[[58,[25,89]]]],[[29,41,40],92],[29,25],[29,[[58,[25,[58,[25,89]]]]]],[88],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[29,93],[[4,[69]]]],[[90,25,25,25,[56,[54]]]],[[90,25,25],[[4,[69]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[90,49],0,0,[[[58,[25,[58,[25,89]]]],[58,[25,89]],[57,[94]],[57,[95]]],90],[[25,[40,[25]],25],94],[[25,25],95],[42],[[29,93],[[4,[69]]]],[[90,25]],[54,[[4,[[57,[63]],62]]]],[89,4],[61,[[4,[62]]]],[61,[[4,[62]]]],[69,[[40,[38]]]],[[]],[[]],[[],25],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],38],[33,[[40,[39]]]],[[]],[[]],[33,[[40,[38]]]],[1],[1],[33,41],[1],[[33,34],35],[[33,34],35],[[]],[30,[[4,[40,33]]]],[[30,57],[[4,[[57,[40]],33]]]],[[],1],[[30,12],[[4,[92,33]]]],[[30,57,12],[[4,[[57,[92]],33]]]],[[30,92,12],[[4,[92,33]]]],[[30,57,12],[[4,[[57,[92]],33]]]],[[]],[[],3],[42],[[30,91],82],[[30,91,12],82],[[30,91],82],[[30,12],[[4,[33]]]],[[30,57,12],[[4,[33]]]],[[30,92,12],[[4,[33]]]],[[30,57,12],[[4,[33]]]],[33,[[40,[38]]]],[[],25],[[],4],[[],4],[[],5],[[]],0,0,0,0,0,0,0,0,0,0,0],"p":[[15,"usize"],[3,"ByteWriter"],[3,"Request"],[4,"Result"],[3,"TypeId"],[3,"ByteReader"],[15,"u64"],[6,"Result"],[3,"Error"],[4,"SeekFrom"],[4,"Error"],[15,"i64"],[3,"ClientFactoryAsync"],[3,"ClientFactory"],[3,"ClientConfig"],[8,"ControllerClient"],[3,"ScopedStream"],[3,"EventWriter"],[3,"IndexReader"],[8,"Fields"],[8,"PartialOrd"],[8,"PartialEq"],[8,"Debug"],[3,"IndexWriter"],[3,"String"],[3,"ReaderGroup"],[3,"ReaderGroupConfig"],[3,"Scope"],[3,"Synchronizer"],[3,"Table"],[3,"WriterId"],[3,"TransactionalEventWriter"],[4,"TableError"],[3,"Formatter"],[6,"Result"],[3,"Handle"],[3,"Runtime"],[8,"Error"],[3,"Backtrace"],[4,"Option"],[15,"str"],[3,"Demand"],[3,"EventReader"],[3,"Transaction"],[3,"SegmentSlice"],[4,"EventReaderError"],[3,"SliceMetadata"],[3,"Event"],[15,"bool"],[3,"ReaderGroupConfigBuilder"],[4,"SerdeError"],[4,"StreamCutVersioned"],[3,"StreamCutV1"],[8,"ValueData"],[3,"Global"],[3,"Box"],[3,"Vec"],[3,"HashMap"],[3,"Reader"],[4,"ReaderGroupStateError"],[3,"Serializer"],[3,"Error"],[15,"u8"],[3,"ReaderGroupState"],[3,"ScopedSegment"],[3,"Offset"],[15,"isize"],[3,"HashSet"],[4,"SynchronizerError"],[3,"HashMap"],[4,"TransactionError"],[4,"TransactionalEventWriterError"],[4,"TransactionStatus"],[3,"Timestamp"],[3,"TxId"],[3,"Receiver"],[4,"IndexReaderError"],[3,"FieldNotFound"],[3,"InvalidOffset"],[3,"Internal"],[8,"Clone"],[8,"Stream"],[4,"IndexWriterError"],[3,"InvalidFields"],[3,"InvalidCondition"],[3,"Internal"],[3,"InvalidData"],[3,"Key"],[3,"Value"],[3,"Update"],[15,"i32"],[6,"Version"],[8,"FnMut"],[3,"Insert"],[3,"Remove"],[13,"ConditionalCheckFailure"],[13,"InternalFailure"],[13,"InvalidInput"],[13,"StateError"],[13,"Cbor"],[13,"ReaderAlreadyOfflineError"],[13,"SyncError"],[13,"TxnSegmentWriterError"],[13,"TxnClosed"],[13,"TxnCommitError"],[13,"TxnAbortError"],[13,"TxnStreamWriterError"],[13,"TxnControllerError"],[13,"PingerError"],[13,"TxnStreamControllerError"],[8,"Value"],[13,"FieldNotFound"],[13,"InvalidOffset"],[13,"Internal"],[13,"InvalidData"],[13,"InvalidFields"],[13,"InvalidCondition"],[13,"Internal"],[8,"ValueClone"],[8,"ValueSerialize"],[13,"SyncUpdateError"],[13,"SyncTombstoneError"],[13,"SyncPreconditionError"],[13,"SyncTableError"],[13,"ConnectionError"],[13,"KeyDoesNotExist"],[13,"IncorrectKeyVersion"],[13,"OperationError"],[13,"TableDoesNotExist"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
